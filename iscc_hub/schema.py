# generated by datamodel-codegen:
#   filename:  openapi.yaml

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Literal, Optional
from uuid import UUID

from ninja import Schema
from pydantic import AnyUrl, Field, RootModel


class ErrorResponse(Schema):
    error: Annotated[str, Field(description="Human-readable error message")]
    detail: Annotated[str | None, Field(description="Additional error details (optional)")] = None
    request_id: Annotated[UUID | None, Field(description="Unique request identifier for debugging")] = None


class Proof(Schema):
    type: Literal["DataIntegrityProof"]
    cryptosuite: Literal["eddsa-jcs-2022"]
    verificationMethod: Annotated[AnyUrl, Field(description="DID URL of the notary's signing key")]
    proofPurpose: Literal["assertionMethod"]
    proofValue: Annotated[
        str,
        Field(
            description="Multibase-encoded signature",
            pattern="^z[1-9A-HJ-NP-Za-km-z]+$",
        ),
    ]


class IsccSignature(Schema):
    version: Annotated[
        Literal["ISCC-SIG v1.0"],
        Field(description='Version of the ISCC Signature format (must be exactly "ISCC-SIG v1.0")'),
    ]
    controller: Annotated[
        AnyUrl | None,
        Field(description="URI that identifies the key controller (e.g., DID or CID)"),
    ] = None
    keyid: Annotated[
        str | None,
        Field(description="Specific key identifier within the controller document"),
    ] = None
    pubkey: Annotated[
        str,
        Field(
            description="Ed25519 public key in multibase format (z-base58-btc with ED01 prefix)",
            pattern="^z[1-9A-HJ-NP-Za-km-z]+$",
        ),
    ]
    proof: Annotated[
        str,
        Field(
            description="EdDSA signature in multibase format (z-base58-btc)",
            pattern="^z[1-9A-HJ-NP-Za-km-z]+$",
        ),
    ]


class Unit(RootModel[str]):
    root: Annotated[str, Field(pattern="^ISCC:[A-Z0-9]{10,73}$")]


class IsccNote(Schema):
    iscc_code: Annotated[
        str,
        Field(
            description="The ISCC-CODE to be notarized",
            examples=["ISCC:KACWN77F73NA44D6EUG3S3QNJIL2BPPQFMW6ZX6CZNOKPAK23S2IJ2I"],
            pattern="^ISCC:[A-Z0-9]{13,73}$",
        ),
    ]
    datahash: Annotated[
        str,
        Field(
            description="Blake3 hash of the notarized asset (lowercase hex encoded 256 bit multihash with blake3 prefix)",
            examples=["1e205ca7815adcb484e9a136c11efe69c1d530176d549b5d18d038eb5280b4b3470c"],
            pattern="^1e20[0-9a-f]{64}$",
        ),
    ]
    metahash: Annotated[
        str | None,
        Field(
            description="Blake3 hash of seed metadata (256-bit lowercase hex-encoded multihash with prefix `1e20`). When present, this creates a cryptographic commitment to the exact metadata state at notarization time, allowing external registries to store mutable or deletable metadata while maintaining temporal integrity.",
            examples=["1e202335f74fc18e2f4f99f0ea6291de5803e579a2219e1b4a18004fc9890b94e598"],
            pattern="^1e20[0-9a-f]{64}$",
        ),
    ] = None
    nonce: Annotated[
        str,
        Field(
            description="Unique 128-bit lowercase hex-encoded random value (first 12-bits denote hub_id 0-4095 for replay protection)",
            examples=["000faa3f18c7b9407a48536a9b00c4cb"],
            pattern="^[0-9a-f]{32}$",
        ),
    ]
    timestamp: Annotated[
        datetime,
        Field(
            description="RFC 3339 formatted timestamp in UTC with millisecond precision (e.g., \"2025-08-04T12:34:56.789Z\"). The 'Z' suffix MUST be used to indicate UTC. This timestamp indicates when the IsccNote was created and signed by the declaring party. HUBs MUST reject IsccNotes with timestamps outside of Â±10 minutes from the HUB's current time.",
            examples=["2025-01-15T12:00:00.000Z"],
        ),
    ]
    gateway: Annotated[
        str | None,
        Field(
            description="URL or URI Template (RFC 6570) pointing to a GATEWAY for metadata and service discovery. Supported template variables are {iscc_id}, {iscc_code}, {pubkey}, {datahash}, {controller}. Must use HTTP or HTTPS scheme.",
            examples=["https://example.com/metadata"],
        ),
    ] = None
    units: Annotated[
        list[Unit] | None,
        Field(
            description="Array of decomposed ISCC-UNITs (excluding Instance-Code Unit). Only include UNITs with ISCC-BODYs larger than 64-bit for improved large-scale discovery and matching. The original ISCC-CODE can be reconstructed by converting the datahash to an Instance-Code UNIT, appending it to this array, and passing to iscc_core.gen_iscc_code. Maximum array size is 100 items.",
            examples=[
                [
                    "ISCC:AADWN77F73NA44D6X3N4VEUAPOW5HJKGK5JKLNGLNFPOESXWYDVDVUQ",
                    "ISCC:EADSKDNZNYGUUF5AMFEJLZ5P66CP5YKCOA3X7F36RWE4CIRCBTUWXYY",
                    "ISCC:GAD334BLFXWN7QWLCSBGJMLRZW73FFNV7ORVUKN23UWPKGQCWTIHQKY",
                ]
            ],
            max_length=4,
        ),
    ] = None
    signature: IsccSignature


class Notarization(Schema):
    seq: Annotated[
        int,
        Field(description="Sequence number in the notary log (starting at 0)", ge=0),
    ]
    iscc_id: Annotated[
        str,
        Field(
            description="Unique ISCC-ID assigned by the notary",
            pattern="^ISCC:[A-Z0-9]{10,}$",
        ),
    ]
    iscc_note: IsccNote


class CredentialSubject(Schema):
    id: Annotated[
        AnyUrl,
        Field(
            description="DID of the subject (signer of the IsccNote)",
            examples=["did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"],
        ),
    ]
    notarization: Annotated[Notarization, Field(description="Notarization details")]


class IsccReceipt(Schema):
    field_context: Annotated[
        list[str],
        Field(
            alias="@context",
            description="JSON-LD context for the Verifiable Credential",
            examples=[["https://www.w3.org/ns/credentials/v2"]],
            min_length=1,
        ),
    ]
    type: Annotated[
        list[str],
        Field(
            description="Types of the credential",
            examples=[["VerifiableCredential", "IsccReceipt"]],
            min_length=2,
        ),
    ]
    issuer: Annotated[
        AnyUrl,
        Field(
            description="DID of the notary server issuing this credential",
            examples=["did:web:notary.example.com"],
        ),
    ]
    credentialSubject: Annotated[
        CredentialSubject,
        Field(description="Claims about the subject of the credential"),
    ]
    proof: Annotated[Proof, Field(description="W3C Data Integrity proof created by notary server")]
