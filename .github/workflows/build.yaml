name: Build and Publish Docker Images

on:
  push:
    branches:
      - develop  # Build and publish on develop branch
    tags:
      - 'v*'  # Build and publish on version tags

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: iscc/iscc-hub

jobs:
  # Call the test workflow first
  test:
    uses: ./.github/workflows/test.yaml

  # Build and publish after tests pass
  docker-build-publish:
    needs: test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv for test generation
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies for test generation
        run: uv sync --all-extras --dev

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For develop branch
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=dev-{{sha}},enable=${{ github.ref == 'refs/heads/develop' }}
            # For version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=ISCC Hub
            org.opencontainers.image.description=Django-based ISCC Discovery Protocol Hub
            org.opencontainers.image.vendor=ISCC Foundation
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate valid test declaration
        run: |
          # Create a Python script to generate a valid declaration with current timestamp
          cat > generate_test_declaration.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import sys
          from datetime import datetime, timezone
          from pathlib import Path
          
          # Add project root to path
          sys.path.insert(0, str(Path(__file__).parent))
          
          # Import test utilities
          from tests.conftest import create_iscc_from_text
          import iscc_crypto as icr
          
          # Generate current timestamp in correct format
          current_time = datetime.now(timezone.utc)
          timestamp = current_time.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
          
          # Generate ISCC data
          iscc_data = create_iscc_from_text("CI Test Content")
          
          # Generate test keypair
          keypair = icr.key_generate(controller="did:web:test.example")
          
          # Generate nonce with hub ID 999 (test hub ID from container env)
          nonce = f"3e7{'f' * 29}"  # 3e7 = 999 in hex, padded to 32 chars
          
          # Create minimal note
          note = {
              "iscc_code": iscc_data["iscc"], 
              "datahash": iscc_data["datahash"],
              "nonce": nonce,
              "timestamp": timestamp,
          }
          
          # Sign the note
          signed_note = icr.sign_json(note, keypair)
          
          # Write to file
          with open("test-declaration.json", "w") as f:
              json.dump(signed_note, f, indent=2)
          
          print(f"Generated test declaration with timestamp: {timestamp}")
          EOF
          
          # Run with uv to access project dependencies
          uv run python generate_test_declaration.py

      - name: Test container startup and health
        run: |
          # Get the first tag from the metadata output to test
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $FIRST_TAG"
          
          echo "Starting test container..."
          docker run -d --name test-hub \
            -e DJANGO_DEBUG=false \
            -e DJANGO_SECRET_KEY=test-secret-key-for-ci-only \
            -e ISCC_HUB_SECKEY=z3u2RDonZ81AFKiw8QCPKcsyg8Yy2MmYQNxfBn51SS2QmMiw \
            -e ISCC_HUB_ID=999 \
            -e ISCC_HUB_DOMAIN=localhost \
            -e ISCC_HUB_REALM=0 \
            -p 8000:8000 \
            "$FIRST_TAG"

          echo "Waiting for container to be ready..."
          # Check container logs periodically and fail fast if container exits
          for i in {1..40}; do
            if ! docker ps | grep -q test-hub; then
              echo "Container exited unexpectedly. Logs:"
              docker logs test-hub
              exit 1
            fi
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "Container is healthy!"
              break
            fi
            if [ $i -eq 40 ]; then
              echo "Container failed to become healthy. Logs:"
              docker logs test-hub
              exit 1
            fi
            echo "Waiting... ($i/40)"
            sleep 3
          done

      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8000/health
          
          echo "Testing DID document endpoint..."
          curl -f http://localhost:8000/.well-known/did.json
          
          echo "Testing OpenAPI schema..."
          curl -f http://localhost:8000/openapi.yaml >/dev/null
          
          echo "Testing declaration endpoint..."
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST http://localhost:8000/declaration \
            -H "Content-Type: application/json" \
            -d @test-declaration.json)
          
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          if [ "$http_status" -eq 201 ]; then
            echo "âœ“ Declaration accepted successfully"
            echo "Response: $body"
          else
            echo "âœ— Declaration failed with status $http_status"
            echo "Response: $body"
            # Don't fail the build - this tests that the container is working
          fi

      - name: Cleanup test container
        if: always()
        run: |
          docker stop test-hub || true
          docker rm test-hub || true

      - name: Generate deployment summary
        run: |
          echo "## ðŸš€ Docker Image Published Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Published Tags:**" >> $GITHUB_STEP_SUMMARY
          
          # Get tags from metadata action
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Commands:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the image:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DJANGO_SECRET_KEY=\$SECRET_KEY \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e ISCC_HUB_SECKEY=\$HUB_SECKEY \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e ISCC_HUB_ID=\$HUB_ID \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e ISCC_HUB_DOMAIN=\$DOMAIN \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY