name: Build and Publish Docker Images

on:
  push:
    tags:
      - 'v*'  # Build and publish on version tags
  workflow_call:  # Allow this workflow to be called by other workflows

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: iscc/iscc-hub

jobs:
  # Call the test workflow first
  test:
    uses: ./.github/workflows/test.yaml

  # Build and publish after tests pass
  docker-build-publish:
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For develop branch
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=dev-{{sha}},enable=${{ github.ref == 'refs/heads/develop' }}
            # For version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=ISCC-HUB
            org.opencontainers.image.description=ISCC Discovery Protocol - HUB
            org.opencontainers.image.vendor=ISCC Foundation
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build Docker image
        run: |
          # Get all tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"

          # Build the image with the first tag
          FIRST_TAG=$(echo "$TAGS" | head -n1)
          echo "Building image: $FIRST_TAG"
          docker build -t "$FIRST_TAG" --target production .

          # Tag with all other tags from metadata
          echo "$TAGS" | tail -n +2 | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "Tagging as: $tag"
              docker tag "$FIRST_TAG" "$tag"
            fi
          done

      - name: Push Docker images
        run: |
          # Push all tags
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "Pushing: $tag"
              docker push "$tag"
            fi
          done

      - name: Test container startup and health
        run: |
          # Get the first tag from the metadata output to test
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $FIRST_TAG"

          echo "Starting test container..."
          docker run -d --name test-hub \
            -e DJANGO_DEBUG=false \
            -e DJANGO_SECRET_KEY=test-secret-key-for-ci-only \
            -e ISCC_HUB_SECKEY=z3u2RDonZ81AFKiw8QCPKcsyg8Yy2MmYQNxfBn51SS2QmMiw \
            -e ISCC_HUB_ID=999 \
            -e ISCC_HUB_DOMAIN=localhost \
            -e ISCC_HUB_REALM=0 \
            -p 8000:8000 \
            "$FIRST_TAG"

          echo "Waiting for container to be ready..."
          # Check container logs periodically and fail fast if container exits
          for i in {1..40}; do
            if ! docker ps | grep -q test-hub; then
              echo "Container exited unexpectedly. Logs:"
              docker logs test-hub
              exit 1
            fi
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "Container is healthy!"
              break
            fi
            if [ $i -eq 40 ]; then
              echo "Container failed to become healthy. Logs:"
              docker logs test-hub
              exit 1
            fi
            echo "Waiting... ($i/40)"
            sleep 3
          done

      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8000/health

          echo "Testing DID document endpoint..."
          curl -f http://localhost:8000/.well-known/did.json

          echo "Testing OpenAPI schema..."
          curl -f http://localhost:8000/openapi.yaml >/dev/null

      - name: Cleanup test container
        if: always()
        run: |
          docker stop test-hub || true
          docker rm test-hub || true

      - name: Generate deployment summary
        run: |
          echo "## ðŸš€ Docker Image Published Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Published Tags:**" >> $GITHUB_STEP_SUMMARY

          # Get tags from metadata action
          TAGS="${{ steps.meta.outputs.tags }}"
          echo "$TAGS" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Commands:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the image:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DJANGO_SECRET_KEY=\$SECRET_KEY \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e ISCC_HUB_SECKEY=\$HUB_SECKEY \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e ISCC_HUB_ID=\$HUB_ID \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e ISCC_HUB_DOMAIN=\$DOMAIN \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
