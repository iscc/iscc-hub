name: Build and Test Docker Images

on:
  push:
    branches: [develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [develop, main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: iscc/iscc-hub

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run complete CI pipeline
        run: uv run poe ci

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    # Only run for develop branch or version tags
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For develop branch
            type=raw,value=dev,enable={{is_default_branch}}
            type=raw,value=dev-{{sha}},enable={{is_default_branch}},suffix={{date '.YYYYMMDD-HHmm' tz='UTC'}}
            # For version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate valid test declaration
        run: |
          # Create a Python script to generate a valid declaration with current timestamp
          cat > generate_test_declaration.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import sys
          from datetime import datetime, timezone
          from pathlib import Path
          
          # Add project root to path
          sys.path.insert(0, str(Path(__file__).parent))
          
          # Import test utilities
          from tests.conftest import create_iscc_from_text
          import iscc_crypto as icr
          
          # Generate current timestamp in correct format
          current_time = datetime.now(timezone.utc)
          timestamp = current_time.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
          
          # Generate ISCC data
          iscc_data = create_iscc_from_text("CI Test Content")
          
          # Generate test keypair
          keypair = icr.key_generate(controller="did:web:test.example")
          
          # Generate nonce with hub ID 999 (test hub ID from container env)
          nonce = f"3e7{'f' * 29}"  # 3e7 = 999 in hex, padded to 32 chars
          
          # Create minimal note
          note = {
              "iscc_code": iscc_data["iscc"], 
              "datahash": iscc_data["datahash"],
              "nonce": nonce,
              "timestamp": timestamp,
          }
          
          # Sign the note
          signed_note = icr.sign_json(note, keypair)
          
          # Write to file
          with open("test-declaration.json", "w") as f:
              json.dump(signed_note, f, indent=2)
          
          print(f"Generated test declaration with timestamp: {timestamp}")
          EOF
          
          # Run with uv to access project dependencies
          uv run python generate_test_declaration.py

      - name: Test container startup and health
        run: |
          echo "Starting test container..."
          docker run -d --name test-hub \
            -e DJANGO_DEBUG=false \
            -e DJANGO_SECRET_KEY=test-secret-key-for-ci-only \
            -e ISCC_HUB_SECKEY=0xb0c4e114e9840237e62f9b88d52fe9e8e3b50db3e3faeef5a7bddbe1cc80e640 \
            -e ISCC_HUB_ID=999 \
            -e ISCC_HUB_DOMAIN=test.local \
            -p 8000:8000 \
            test-image:latest

          echo "Waiting for container to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health >/dev/null 2>&1; do echo "Waiting..."; sleep 3; done'
          echo "Container is healthy!"

      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8000/health
          
          echo "Testing DID document endpoint..."
          curl -f http://localhost:8000/.well-known/did.json
          
          echo "Testing OpenAPI schema..."
          curl -f http://localhost:8000/static/openapi.yaml >/dev/null
          
          echo "Testing declaration endpoint..."
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST http://localhost:8000/declaration \
            -H "Content-Type: application/json" \
            -d @test-declaration.json)
          
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          if [ "$http_status" -eq 201 ]; then
            echo "✓ Declaration accepted successfully"
            echo "Response: $body"
          else
            echo "✗ Declaration failed with status $http_status"
            echo "Response: $body"
            # Don't fail the build - this tests that the container is working
          fi

      - name: Cleanup test container
        if: always()
        run: |
          docker stop test-hub || true
          docker rm test-hub || true

      - name: Export image for publishing
        if: success()
        run: |
          docker save test-image:latest | gzip > iscc-hub-image.tar.gz

      - name: Upload image artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: iscc-hub-image
          path: iscc-hub-image.tar.gz
          retention-days: 1
          compression-level: 0  # Already compressed

  docker-metadata:
    runs-on: ubuntu-latest
    needs: docker-build
    if: success() && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    
    steps:
      - name: Extract metadata for publishing
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For develop branch
            type=raw,value=dev,enable={{is_default_branch}}
            type=raw,value=dev-{{sha}},enable={{is_default_branch}},prefix=dev-,suffix={{date '.YYYYMMDD-HHmm' tz='UTC'}}
            # For version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=ISCC Hub
            org.opencontainers.image.description=Django-based ISCC Discovery Protocol Hub
            org.opencontainers.image.vendor=ISCC Foundation
            org.opencontainers.image.licenses=Apache-2.0