[project]
name = "iscc-hub"
version = "0.1.0"
description = "ISCC-HUB - ISCC Declarations & Discovery"
requires-python = ">=3.12"
dependencies = [
    "django>=5.2.5",
    "django-environ>=0.12.0",
    "django-ninja>=1.4.3",
    "django-unfold>=0.63.0",
    "gunicorn>=23.0.0",
    "iscc-core>=1.2.1",
    "iscc-crypto>=0.4.0",
    "niquests>=3.15.2",
    "python-dateutil>=2.9.0.post0",
    "servestatic>=3.1.0",
    "uritemplate>=4.2.0",
    "uvicorn>=0.35.0",
]

[tool.uv]
dev-dependencies = [
    "django-types>=0.22.0",
    "mdformat>=0.7.22",
    "mdformat-frontmatter>=2.0.8",
    "mdformat-gfm>=0.4.1",
    "poethepoet>=0.36.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-django>=4.11.1",
    "ruff>=0.12.8",
    "schemathesis>=4.0.23",
    "pyright>=1.1.379",
    "datamodel-code-generator>=0.32.0",
    "httpx>=0.28.1",
    "aiomultiprocess>=0.9.1",
]

[tool.ruff]
line-length = 119
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = ["F401"]  # Ignore unused imports

[tool.ruff.lint.per-file-ignores]
"iscc_hub/schema.py" = ["E501"]  # Ignore line length in generated file

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "basic"
include = ["iscc_hub"]
exclude = [
    "iscc_hub/settings.py",
    "**/__pycache__",
    ".git",
    ".venv",
    "data",
    "build",
    "dist",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.mdformat]
wrap = 120
end_of_line = "lf"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-q --tb=short -x --cov=iscc_hub --cov-report=term-missing:skip-covered"
filterwarnings = [
    "ignore::pydantic.PydanticDeprecatedSince20",
    "ignore:Error when trying to teardown test databases.*:pytest.PytestWarning"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
]

[tool.coverage.run]
source = ["iscc_hub"]
omit = ["*/migrations/*", "*/asgi.py", "*/wsgi.py", "*/urls*.py", "*/schema.py"]

[tool.coverage.report]
precision = 1
show_missing = true
skip_covered = true
skip_empty = true
fail_under = 100

[tool.datamodel-codegen]
input = "iscc_hub/static/openapi.yaml"
input-file-type = "openapi"
output = "iscc_hub/schema.py"
output-model-type = "pydantic_v2.BaseModel"
base-class = "ninja.Schema"
disable-timestamp = true
target-python-version = "3.12"
use-subclass-enum = true
use-standard-collections = true
use-annotated = true
field-constraints = true
use-union-operator = true
extra-fields = "forbid"
strict-nullable = true
use-title-as-name = true

[tool.poe.tasks]
# Code quality tasks
build-schema = { cmd = "uv run datamodel-codegen", help = "Build pydantic models from openapi.yaml" }
check-python = { cmd = "uv run ruff check --fix --unsafe-fixes .", help = "Check python code"}
check-types = { cmd = "uv run pyright", help = "Run Pyright type checking"}
format-python = { cmd = "uv run ruff format .", help = "Format python code"}
format-markdown = { cmd = "uv run mdformat .", help = "Format markdown"}
test-python = {cmd = "uv run pytest -m 'not slow'", help = "Run python tests (excluding slow tests)"}
test-all = {cmd = "uv run pytest", help = "Run all python tests including slow ones"}

# Development tasks
init = { cmd = "uv run python scripts/db_management.py init", help = "Initialize dev database (skips if exists)" }
reset = { cmd = "uv run python scripts/db_management.py reset", help = "Reset dev database with migrations, demo user, and fixtures" }
serve = { cmd = "uv run uvicorn iscc_hub.asgi:application --host localhost --port 8000 --reload --use-colors", help = "Serve with uvicorn for development" }
fixtures-load = { cmd = "uv run python manage.py loaddata test_data", help = "Load fixture data for testing" }
fixtures-generate = { cmd = "uv run python scripts/generate_fixtures.py", help = "Generate realistic fixture data from valid IsccNotes" }
declare = { cmd = "uv run python scripts/declare.py", help = "Create and declare a random ISCC note (--hub-url to specify hub, defaults to localhost:8000)" }

all = [
    "build-schema",
    "check-python",
    "format-python",
    "check-types",
    "format-markdown",
    "test-python",
]

ci = [
    "build-schema",
    "check-python",
    "format-python",
    "check-types",
    "format-markdown",
    "test-all",
]
